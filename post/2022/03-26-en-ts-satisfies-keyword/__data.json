{"type":"data","nodes":[null,{"type":"data","data":[{"html":1,"frontmatter":2,"date":14,"lang":15,"id":16,"tocData":17,"langs":18},"\u003Cp>With Typescript, you can do strict type checking at compile time or before,\nthanks to Typescript's features and help from IDE.\u003C/p>\n\u003C!--more-->\n\u003Cp>Let us say we want to define an object having\nproperties of smartphones.\nWe can achieve it like the code below:\u003C/p>\n\u003Cpre class=\"language-ts\">\u003Ccode class=\"language-ts code-highlight\">\u003Cspan class=\"code-line line-number\" line=\"1\">\u003Cspan class=\"token keyword\">const\u003C/span> \u003Cspan class=\"token constant\">SMARTPHONE_MAPPING\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"2\">  \u003Cspan class=\"token constant\">IPHONE_12\u003C/span> \u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>displaySize\u003Cspan class=\"token operator\">:\u003C/span>   \u003Cspan class=\"token number\">6.06\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>  weight\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">\"164g\"\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"3\">  \u003Cspan class=\"token constant\">GALAXY_S22\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>displaySize\u003Cspan class=\"token operator\">:\u003C/span>   \u003Cspan class=\"token number\">6.1\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>   weight\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">\"168g\"\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"4\">\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Of course, there are numerous phones out there,\nso we might add more phones later on. Also,\nwe do not know what names those phone will be called,\nso \u003Ccode>SMARTPHONE_MAPPING\u003C/code> would have arbitrary random keys.\u003C/p>\n\u003Cp>But while adding more phones, we do not want to introduce any errors,\nsuch as usual \u003Cem>\u003Cstrong>developer errors\u003C/strong>\u003C/em> like below:\u003C/p>\n\u003Cpre class=\"language-ts\">\u003Ccode class=\"language-ts code-highlight\">\u003Cspan class=\"code-line line-number\" line=\"1\">\u003Cspan class=\"token keyword\">const\u003C/span> \u003Cspan class=\"token constant\">SMARTPHONE_MAPPING\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"2\">  \u003Cspan class=\"token constant\">IPHONE_12\u003C/span> \u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>displaySize\u003Cspan class=\"token operator\">:\u003C/span>   \u003Cspan class=\"token number\">6.06\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>  weight\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">\"164g\"\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"3\">  \u003Cspan class=\"token constant\">GALAXY_S22\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>displaySize\u003Cspan class=\"token operator\">:\u003C/span>   \u003Cspan class=\"token number\">6.1\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>   weight\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">\"168g\"\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"4\">  \u003Cspan class=\"token constant\">IPHONE_13\u003C/span> \u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>dispaylSize\u003Cspan class=\"token operator\">:\u003C/span>   \u003Cspan class=\"token number\">7\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>     weight\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">\"150g\"\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token comment\">// key typo\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"5\">  \u003Cspan class=\"token constant\">GALAXY_S23\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>displaySize\u003Cspan class=\"token operator\">:\u003C/span>   \u003Cspan class=\"token number\">7\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>                   \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token comment\">// missing key\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"6\">\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003C/code>\u003C/pre>\n\u003Cbr>\n\u003Cp>What we want inside \u003Ccode>SMARTPHONE_MAPPING\u003C/code> are nothing but\ndisplay size and weight properties only.\nHow do we ensure that the values in the object are of the type?\nWell, we can give a type to the object, like below:\u003C/p>\n\u003Cpre class=\"language-ts\">\u003Ccode class=\"language-ts code-highlight\">\u003Cspan class=\"code-line line-number\" line=\"1\">\u003Cspan class=\"token keyword\">type\u003C/span> \u003Cspan class=\"token class-name\">\u003Cspan class=\"token constant\">SMARTPHONE_MAP_TYPE\u003C/span>\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>key\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>displaySize\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">number\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> weight\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"2\">\u003Cspan class=\"token comment\">// Or we can defind the type as Record.\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"3\">\u003Cspan class=\"token comment\">// type SMARTPHONE_MAP_TYPE = Record&#x3C;string, {displaySize: number, weight: string}}>\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"4\">\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"5\">\u003Cspan class=\"token keyword\">const\u003C/span> \u003Cspan class=\"token constant\">SMARTPHONE_MAPPING\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token constant\">SMARTPHONE_MAP_TYPE\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"6\">  \u003Cspan class=\"token constant\">IPHONE_12\u003C/span> \u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>displaySize\u003Cspan class=\"token operator\">:\u003C/span>   \u003Cspan class=\"token number\">6.06\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>  weight\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">\"164g\"\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"7\">  \u003Cspan class=\"token constant\">GALAXY_S22\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>displaySize\u003Cspan class=\"token operator\">:\u003C/span>   \u003Cspan class=\"token number\">6.1\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>   weight\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">\"168g\"\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"8\">\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003C/code>\u003C/pre>\n\u003Cbr>\n\u003Cp>But the problem of giving the object a type is that\nIDE now does not show us the autocomplete of the member keys.\u003C/p>\n\u003Cp>\u003Cimg src=\"/img/2022-03-26-ts-satisfies-keyword/with-autocomplete.png\" alt=\"with-autocomplete\">\u003C/p>\n\u003Cp>\u003Cstrong>Before Having explicit type\u003C/strong>\n\u003Cbr>\u003Cbr>\u003C/p>\n\u003Cp>\u003Cimg src=\"/img/2022-03-26-ts-satisfies-keyword/without-autocomplete.png\" alt=\"without-autocomplete\">\u003C/p>\n\u003Cp>\u003Cstrong>After Having explicit type\u003C/strong>\n\u003Cbr>\u003Cbr>\u003C/p>\n\u003Cp>Well, why does this happen?\nThis is because the type of the variable is \u003Ccode>SMARTPHONE_MAP_TYPE\u003C/code>,\nwhere there is no information about what is in the object.\n\u003Cstrong>All the information about what's inside the variable\nhas been deprecated.\u003C/strong> All it knows about the keys is that\nthey are string type. Please take a look at the type hints\nand find out what are the differences.\u003C/p>\n\u003Cp>\u003Cimg src=\"/img/2022-03-26-ts-satisfies-keyword/without-type.png\" alt=\"without-type\">\u003C/p>\n\u003Cp>\u003Cstrong>Before Having explicit type\u003C/strong>\n\u003Cbr>\u003Cbr>\u003C/p>\n\u003Cp>\u003Cimg src=\"/img/2022-03-26-ts-satisfies-keyword/with-type.png\" alt=\"with-type\">\u003C/p>\n\u003Cp>\u003Cstrong>After Having explicit type\u003C/strong>\n\u003Cbr>\u003Cbr>\u003C/p>\n\u003Cp>\u003Ccode>SMARTPHONE_MAP_TYPE\u003C/code> does not contain any information about\nwhat are members but only that the keys are in string,\nand the values are in object containing the two properties.\u003C/p>\n\u003Cp>\u003Ccode>SMARTPHONE_MAPPING\u003C/code> does know the member keys, but\ngiving the explicit type to the object made it\nblind about what is inside the object.\u003C/p>\n\u003Ch2>Solution\u003C/h2>\n\u003Cp>To solve this, we can implement a generic function\nwhich accepts \u003Ccode>arg\u003C/code> which extends \u003Ccode>SMARTPHONE_MAP_TYPE\u003C/code>,\nand returns \u003Ccode>arg\u003C/code> as is. See \u003Ccode>asType\u003C/code> function below:\u003C/p>\n\u003Cpre class=\"language-ts\">\u003Ccode class=\"language-ts code-highlight\">\u003Cspan class=\"code-line line-number\" line=\"1\">\u003Cspan class=\"token keyword\">type\u003C/span> \u003Cspan class=\"token class-name\">\u003Cspan class=\"token constant\">SMARTPHONE_MAP_TYPE\u003C/span>\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>key\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>displaySize\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">number\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> weight\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"2\">\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"3\">\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token generic-function\">\u003Cspan class=\"token function\">asType\u003C/span>\u003Cspan class=\"token generic class-name\">\u003Cspan class=\"token operator\">&#x3C;\u003C/span>\u003Cspan class=\"token constant\">T\u003C/span> \u003Cspan class=\"token keyword\">extends\u003C/span> \u003Cspan class=\"token constant\">SMARTPHONE_MAP_TYPE\u003C/span>\u003Cspan class=\"token operator\">>\u003C/span>\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>arg\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token constant\">T\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token constant\">T\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"4\">  \u003Cspan class=\"token keyword\">return\u003C/span> arg\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"5\">\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"6\">\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"7\">\u003Cspan class=\"token keyword\">const\u003C/span> \u003Cspan class=\"token constant\">SMARTPHONE_MAPPING\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token function\">asType\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"8\">  \u003Cspan class=\"token constant\">IPHONE_12\u003C/span> \u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>displaySize\u003Cspan class=\"token operator\">:\u003C/span>   \u003Cspan class=\"token number\">6.06\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>  weight\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">\"164g\"\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"9\">  \u003Cspan class=\"token constant\">GALAXY_S22\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>displaySize\u003Cspan class=\"token operator\">:\u003C/span>   \u003Cspan class=\"token number\">6.1\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>   weight\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">\"168g\"\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"10\">\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Since the function returns \u003Ccode>T\u003C/code> type which extends \u003Ccode>SMARTPHONE_MAP_TYPE\u003C/code>,\nwe can have strict type checking.\nAnd since the function returns \u003Ccode>arg\u003C/code> which is of \u003Ccode>T\u003C/code> type,\nnot \u003Ccode>SMARTPHONE_MAP_TYPE\u003C/code>, the returned value has information what is inside itself.\u003C/p>\n\u003Cp>\u003Cimg src=\"/img/2022-03-26-ts-satisfies-keyword/strict-type-checking.png\" alt=\"strict-type-checking\">\u003C/p>\n\u003Cp>\u003Cimg src=\"/img/2022-03-26-ts-satisfies-keyword/autocomplete.png\" alt=\"autocomplete\">\u003C/p>\n\u003Cp>Now we have both strict type checking and autocompletion. :)\u003C/p>\n\u003Cp>However, this solution is a little bit tedious with \u003Cstrong>runtime overhead\u003C/strong> due to \u003Ccode>asType\u003C/code> function calls.\nLuckily, Typescript is going to introduce \u003Ccode>satisfies\u003C/code> keyword\nin the near future, \u003Cdel>maybe in \u003Ccode>4.7\u003C/code> version.\u003C/del>\u003C/p>\n\u003Cblockquote>\n\u003Cp>⚠️ 09/04/2022 Update\u003Cbr>\n\u003Ccode>satisfies\u003C/code> keyword PR finally got merged in main brnach (\u003Ca href=\"https://github.com/microsoft/TypeScript/pull/46827\">PR link\u003C/a>)\nand is expected to be released in \u003Ccode>4.9\u003C/code> version. Check their \u003Ca href=\"https://github.com/microsoft/TypeScript/issues/50457\">iteration plan\u003C/a> for more information.\u003C/p>\n\u003C/blockquote>\n\u003Cpre class=\"language-ts\">\u003Ccode class=\"language-ts code-highlight\">\u003Cspan class=\"code-line line-number\" line=\"1\">\u003Cspan class=\"token keyword\">type\u003C/span> \u003Cspan class=\"token class-name\">\u003Cspan class=\"token constant\">SMARTPHONE_MAP_TYPE\u003C/span>\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>key\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>displaySize\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">number\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> weight\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"2\">\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"3\">\u003Cspan class=\"token keyword\">const\u003C/span> \u003Cspan class=\"token constant\">SMARTPHONE_MAPPING\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"4\">  \u003Cspan class=\"token constant\">IPHONE_12\u003C/span> \u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>displaySize\u003Cspan class=\"token operator\">:\u003C/span>   \u003Cspan class=\"token number\">6.06\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>  weight\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">\"164g\"\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"5\">  \u003Cspan class=\"token constant\">GALAXY_S22\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>displaySize\u003Cspan class=\"token operator\">:\u003C/span>   \u003Cspan class=\"token number\">6.1\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>   weight\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">\"168g\"\u003C/span>\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"6\">\u003Cspan class=\"token punctuation\">}\u003C/span> satisfies \u003Cspan class=\"token constant\">SMARTPHONE_MAP_TYPE\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Check out the related Github issue on Typescript repository for more.\n\u003Ca href=\"https://github.com/microsoft/TypeScript/issues/47920\">[Link]\u003C/a>\u003C/p>",{"layout":3,"toc":4,"editedDate":5,"title":6,"category":7,"tags":9,"author":12},"post",false,"2022-09-22","Typescript satisfies keyword",[8],"Programming",[10,11],"typescript","javascript",[13],"이현재","2022-03-26","en","03-26-en-ts-satisfies-keyword",[],[15]],"uses":{"params":["year","slug"]}}]}
