{"type":"data","nodes":[null,{"type":"data","data":[{"html":1,"frontmatter":2,"date":12,"lang":13,"id":14,"tocData":15,"langs":36},"\u003Cp>Typescript 5.5 베타가 2024년 4월 25일 릴리즈 되었습니다!\u003Cbr>\n\u003Ca href=\"https://devblogs.microsoft.com/typescript/announcing-typescript-5-5-beta\">https://devblogs.microsoft.com/typescript/announcing-typescript-5-5-beta\u003C/a>\u003Cbr>\n늘 그렇듯이 이번에도 변경점이 많은데요,\n그러나 특히 눈에 띄는 타입 체크 관련 변경점이 있어 소개해드리도록 하겠습니다.\u003C/p>\n\u003Ch1 id=\"1-Inferred-Type-Predicate\">Inferred Type Predicate\u003C/h1>\n\u003Cp>다음과 같은 \u003Ccode>Bird\u003C/code>, \u003Ccode>Fish\u003C/code> 두 타입이 있으며 둘이 Union 된 타입을 가진 변수가 있다고 칩시다.\u003C/p>\n\u003Cpre class=\"language-ts\">\u003Ccode class=\"language-ts code-highlight\">\u003Cspan class=\"code-line line-number\" line=\"1\">\u003Cspan class=\"token keyword\">type\u003C/span> \u003Cspan class=\"token class-name\">Bird\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"2\">    \u003Cspan class=\"token function-variable function\">fly\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token keyword\">void\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"3\">\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"4\">\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"5\">\u003Cspan class=\"token keyword\">type\u003C/span> \u003Cspan class=\"token class-name\">Fish\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"6\">    \u003Cspan class=\"token function-variable function\">swim\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token keyword\">void\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"7\">\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"8\">\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"9\">\u003Cspan class=\"token keyword\">declare\u003C/span> \u003Cspan class=\"token keyword\">const\u003C/span> animal\u003Cspan class=\"token operator\">:\u003C/span> Bird \u003Cspan class=\"token operator\">|\u003C/span> Fish\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>이 변수의 타입에 따라 다른 코드를 실행하는 브랜칭을 하고 싶습니다.\n기존 타입스크립트의 타입 체크는 인라인으로 if 브랜치를 타거나:\u003C/p>\n\u003Cpre class=\"language-ts\">\u003Ccode class=\"language-ts code-highlight\">\u003Cspan class=\"code-line line-number\" line=\"1\">\u003Cspan class=\"token keyword\">if\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">'swim'\u003C/span> \u003Cspan class=\"token keyword\">in\u003C/span> animal\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"2\">    animal\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">swim\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"3\">\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>타입을 검사하는 함수, \u003Cem>User-defined Type Guard\u003C/em>를 정의하여\n타입을 체크할 수 있었습니다.\u003C/p>\n\u003Cpre class=\"language-ts\">\u003Ccode class=\"language-ts code-highlight\">\u003Cspan class=\"code-line line-number\" line=\"1\">\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">getIsBird\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>animal\u003Cspan class=\"token operator\">:\u003C/span> Bird \u003Cspan class=\"token operator\">|\u003C/span> Fish\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> animal \u003Cspan class=\"token keyword\">is\u003C/span> Bird \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"2\">    \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token string\">'fly'\u003C/span> \u003Cspan class=\"token keyword\">in\u003C/span> animal\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"3\">\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>이렇게 \u003Ccode>arg is Type\u003C/code> 불린을 반환하는 함수를 \u003Cem>Type Guard\u003C/em> 함수라고 부릅니다.\u003C/p>\n\u003Cblockquote>\n\u003Cp>To define a user-defined type guard, we simply need to define\na function whose return type is a type predicate:\u003Cbr>\n\u003Ca href=\"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates\">https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates\u003C/a>\u003C/p>\n\u003C/blockquote>\n\u003Cp>하지만 이렇게 별개의 함수를 만들 때 Type Predicate를 반환 타입으로\n명시하지 않으면 타입스크립트는 해당 타입을 Narrowing 하지 않는 문제가 있습니다!\u003C/p>\n\u003Cpre class=\"language-ts\">\u003Ccode class=\"language-ts code-highlight\">\u003Cspan class=\"code-line line-number\" line=\"1\">\u003Cspan class=\"token comment\">// Typescript does not see it as type guard function; it just returns a boolean!\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"2\">\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">getIsBird\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>animal\u003Cspan class=\"token operator\">:\u003C/span> Bird \u003Cspan class=\"token operator\">|\u003C/span> Fish\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"3\">    \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token string\">'fly'\u003C/span> \u003Cspan class=\"token keyword\">in\u003C/span> animal\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"4\">\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"5\">\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"6\">\u003Cspan class=\"token keyword\">if\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token function\">getIsBird\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>animal\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"7\">    animal\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">fly\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span> \u003Cspan class=\"token comment\">// This line emits error!\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"8\">\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cimg src=\"/img/2024-05-18-ko-typescript-5-5-notable-changes/no-type-predicate-function-error.png\" alt=\"no-type-predicate-function-error\">\u003C/p>\n\u003Cp>로직 상으로는 문제가 전혀 없습니다. 타입 검사 후 \u003Ccode>animal\u003C/code>이 \u003Ccode>Bird\u003C/code> 타입임이 보장되며,\n중간에 \u003Ccode>animal\u003C/code> 변수가 변한 것도 아닙니다.\n그저 타입스크립트가 이것을 처리할 수 없었던 것이죠.\u003C/p>\n\u003Cp>하지만 이제 5.5 에서는 가능합니다!\u003C/p>\n\u003Cpre class=\"language-ts\">\u003Ccode class=\"language-ts code-highlight\">\u003Cspan class=\"code-line line-number\" line=\"1\">\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">getIsBird\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>animal\u003Cspan class=\"token operator\">:\u003C/span> Bird \u003Cspan class=\"token operator\">|\u003C/span> Fish\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"2\">    \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token string\">'fly'\u003C/span> \u003Cspan class=\"token keyword\">in\u003C/span> animal\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"3\">\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"4\">\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"5\">\u003Cspan class=\"token keyword\">if\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token function\">getIsBird\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>animal\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"6\">    animal\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">fly\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span> \u003Cspan class=\"token comment\">// This is fine since 5.5!\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"7\">\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>추론이 잘 되고 있는지는 LSP의 함수 Definition으로도 확인할 수 있습니다.\n추론 되었다면 함수의 리턴 타입에 Type Predicate가 명시됩니다.\u003C/p>\n\u003Cp>\u003Cimg src=\"/img/2024-05-18-ko-typescript-5-5-notable-changes/inferred-type-predicate.png\" alt=\"inferred-type-predicate\">\u003C/p>\n\u003Ch2 id=\"2-이점\">이점\u003C/h2>\n\u003Cp>가장 명확한 장점은 이제 Type Predicate를 명시하지 않아도 된다는 점입니다.\n하지만 더 나아가, 추론이 Arrow Function에도 동작하기 때문에,\n지금껏 쓰지 못했던 \u003Ccode>Array.filter(v => v !== null)\u003C/code>과 같은 코드에 대해서도\nType Narrowing이 동작합니다!\u003C/p>\n\u003Cpre class=\"language-ts\">\u003Ccode class=\"language-ts code-highlight\">\u003Cspan class=\"code-line line-number\" line=\"1\">\u003Cspan class=\"token keyword\">declare\u003C/span> \u003Cspan class=\"token keyword\">const\u003C/span> animals\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>Bird \u003Cspan class=\"token operator\">|\u003C/span> Fish\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"2\">\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"3\">\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">getIsBird\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>animal\u003Cspan class=\"token operator\">:\u003C/span> Bird \u003Cspan class=\"token operator\">|\u003C/span> Fish\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> animal \u003Cspan class=\"token keyword\">is\u003C/span> Bird \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"4\">  \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token string\">'fly'\u003C/span> \u003Cspan class=\"token keyword\">in\u003C/span> animal\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"5\">\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"6\">\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"7\">\u003Cspan class=\"token comment\">// We used to write this way.\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"8\">\u003Cspan class=\"token keyword\">const\u003C/span> birds \u003Cspan class=\"token operator\">=\u003C/span> animals\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"9\">    \u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">filter\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>getIsBird\u003Cspan class=\"token punctuation\">)\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"10\">    \u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">forEach\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>animal \u003Cspan class=\"token operator\">=>\u003C/span> animal\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">fly\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"11\">\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"12\">\u003Cspan class=\"token comment\">// This is fine since 5.5!\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"13\">\u003Cspan class=\"token keyword\">const\u003C/span> birds \u003Cspan class=\"token operator\">=\u003C/span> animals\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"14\">  \u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">filter\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>animal \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token string\">'fly'\u003C/span> \u003Cspan class=\"token keyword\">in\u003C/span> animal\u003Cspan class=\"token punctuation\">)\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"15\">  \u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">forEach\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>animal \u003Cspan class=\"token operator\">=>\u003C/span> animal\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">fly\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>이제 꼭 별개의 Type Guard 함수를 선언하지 않아도 됩니다!\u003C/p>\n\u003Ch2 id=\"3-추론-조건\">추론 조건\u003C/h2>\n\u003Cp>타입스크립트 5.5부터 Type Predicate가 명시되지 않은 함수에 대해서도\n아래 조건을 충족하면 Type Predicate를 반환하는 함수임을 \u003Cem>추론\u003C/em> 합니다.\n대개의 경우 평소 쓰던 것처럼 Type Guard 함수를 작성하면 잘 동작할 겁니다.\u003C/p>\n\u003Col>\n\u003Cli>명시된 리턴 타입이나 Type Predicate가 없어야 함.\u003C/li>\n\u003Cli>\u003Ccode>return\u003C/code> 문이 하나만 있어야 하며 implicit return은 없어야 함.\u003C/li>\n\u003Cli>인자를 변형하지 않아야 함.\u003C/li>\n\u003Cli>파라미터와 연관하여 \u003Ccode>boolean\u003C/code> 표현식 (expression)을 리턴해야 함.\u003C/li>\n\u003C/ol>\n\u003Cp>1번 조건과 관련하여, \u003Ccode>boolean\u003C/code>을 명시해주어도 안됩니다.\n그리고 Type Predicate를 명시하면 추론의 필요가 없겠죠.\u003C/p>\n\u003Cp>2번은 함수가 명시적인 리턴을 해야 추론이 가능함을 나타냅니다.\n또한 리턴 문이 하나만 존재해야 함에 주의하세요.\n다음은 추론이 안되는 코드 예시입니다.\u003C/p>\n\u003Cpre class=\"language-ts\">\u003Ccode class=\"language-ts code-highlight\">\u003Cspan class=\"code-line line-number\" line=\"1\">\u003Cspan class=\"token comment\">// No Inferred Type Predicate\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"2\">\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">getIsBird\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>animal\u003Cspan class=\"token operator\">:\u003C/span> Bird \u003Cspan class=\"token operator\">|\u003C/span> Fish\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span> \n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"3\">  \u003Cspan class=\"token keyword\">if\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">'fly'\u003C/span> \u003Cspan class=\"token keyword\">in\u003C/span> animal\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"4\">    \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token boolean\">true\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"5\">  \u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"6\">  \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token boolean\">false\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"7\">\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"8\">\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"9\">\u003Cspan class=\"token comment\">// No Inferred Type Predicate\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"10\">\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">getIsBirdNotFishOrDog\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>animal\u003Cspan class=\"token operator\">:\u003C/span> Bird \u003Cspan class=\"token operator\">|\u003C/span> Fish \u003Cspan class=\"token operator\">|\u003C/span> Dog\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"11\">  \u003Cspan class=\"token keyword\">if\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">'bark'\u003C/span> \u003Cspan class=\"token keyword\">in\u003C/span> animal\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"12\">    \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token boolean\">false\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"13\">  \u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"14\">  \u003Cspan class=\"token keyword\">if\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">'swim'\u003C/span> \u003Cspan class=\"token keyword\">in\u003C/span> animal\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"15\">    \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token boolean\">false\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"16\">  \u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"17\">  \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token boolean\">true\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"18\">\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>4번은 실제로 인자의 타입을 검사해야 \u003Ccode>true\u003C/code>가 나올 code path와\n\u003Ccode>false\u003C/code>가 나올 code path를 타입스크립트가 검사해\n추론할 수 있음을 의미합니다.\n예를 들어 아래는 안됩니다.\u003C/p>\n\u003Cpre class=\"language-ts\">\u003Ccode class=\"language-ts code-highlight\">\u003Cspan class=\"code-line line-number\" line=\"1\">\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">getIsBird\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>animal\u003Cspan class=\"token operator\">:\u003C/span> Bird \u003Cspan class=\"token operator\">|\u003C/span> Fish\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"2\">  \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token boolean\">true\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"3\">\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>희한하게 아래 코드도 안됩니다. 리턴 값이 \u003Ccode>true\u003C/code>라면\n\u003Ccode>animal\u003C/code>이 \u003Ccode>Bird\u003C/code>임이 보장이 됨에도요.\n이것은 왜인지 잘 모르겠네요.\u003Cbr>\nPR을 읽어보면 Type Guard는 \u003Cem>if and only if\u003C/em> 가 되어야만 합니다.\n그래서 \u003Ccode>return 'fly' in animal &#x26;&#x26; Math.random() > 0.5\u003C/code>는\n\u003Ccode>Bird\u003C/code> 인자가 전달되어도 뒤 표현식에 따라\n리턴 값이 달라질 수 있으므로 타입 가드 함수라고 할 수 없는 것이죠.\n그럼에도 불구하고 \u003Ccode>&#x26;&#x26; true\u003C/code>는 왜 타입 가드가 아닌지 설명이 안되는군요.\u003C/p>\n\u003Cpre class=\"language-ts\">\u003Ccode class=\"language-ts code-highlight\">\u003Cspan class=\"code-line line-number\" line=\"1\">\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">getIsBird\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>animal\u003Cspan class=\"token operator\">:\u003C/span> Bird \u003Cspan class=\"token operator\">|\u003C/span> Fish\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"2\">  \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token string\">'fly'\u003C/span> \u003Cspan class=\"token keyword\">in\u003C/span> animal \u003Cspan class=\"token operator\">&#x26;&#x26;\u003C/span> \u003Cspan class=\"token boolean\">true\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"3\">\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>이외에도 Inferred Type Predicate는 제가 소개드리지 못한 상세 사항이 많으니\n더 자세한 사항은 공식 문서와 PR을 참조해 주세요.\u003C/p>\n\u003Cp>\u003Ca href=\"https://devblogs.microsoft.com/typescript/announcing-typescript-5-5-beta/#inferred-type-predicates\">https://devblogs.microsoft.com/typescript/announcing-typescript-5-5-beta/#inferred-type-predicates\u003C/a>\n\u003Ca href=\"https://github.com/microsoft/TypeScript/pull/57465\">https://github.com/microsoft/TypeScript/pull/57465\u003C/a>\u003C/p>\n\u003Ch2 id=\"4-Type-Guard가-이제-Flow-됩니다\">Type Guard가 이제 Flow 됩니다\u003C/h2>\n\u003Cp>이제 타입스크립트의 Type Guard도 Flow 됩니다!\n그 말인즉슨, Type Guard 함수를 감싸 그대로 반환하면 Type Predicate가 Deprecated 되었는데\n이제 위에서 말한 바와 같이 Type Predicate가 추론 되니 Type Predicate가 보존됩니다.\u003C/p>\n\u003Cpre class=\"language-ts\">\u003Ccode class=\"language-ts code-highlight\">\u003Cspan class=\"code-line line-number\" line=\"1\">\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">getIsBird\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>animal\u003Cspan class=\"token operator\">:\u003C/span> Bird \u003Cspan class=\"token operator\">|\u003C/span> Fish\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"2\">  \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token string\">'fly'\u003C/span> \u003Cspan class=\"token keyword\">in\u003C/span> animal\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"3\">\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"4\">\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"5\">\u003Cspan class=\"token comment\">// This function returns type predicate since 5.5!\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"6\">\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">wrappedGetIsBird\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>animal\u003Cspan class=\"token operator\">:\u003C/span> Bird \u003Cspan class=\"token operator\">|\u003C/span> Fish\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"7\">  \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token function\">getIsBird\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>animal\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"8\">\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"5-Breaking-Changes-in-Your-Code\">Breaking Changes in Your Code\u003C/h2>\n\u003Cp>이제 일반 함수에 대해서 조건이 일치한다면\n\u003Ccode>boolean\u003C/code>이 아닌 Type Predicate를 반환하게 되므로\n그에 따라 타입이 의도치 않게 변경되어 기존 코드에서\n타입 에러가 발생할 수 있습니다.\u003C/p>\n\u003Cp>Type Narrowing이 필요하지 않음에도 불구하고\nInferred Type Predicate로 인해 타입이 검사되어\n필터 아웃된 타입을 변수에 사용하려 할 때\n에러가 발생할 가능성이 있습니다.\u003C/p>\n\u003Cpre class=\"language-ts\">\u003Ccode class=\"language-ts code-highlight\">\u003Cspan class=\"code-line line-number\" line=\"1\">\u003Cspan class=\"token keyword\">declare\u003C/span> \u003Cspan class=\"token keyword\">const\u003C/span> animals\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>Bird \u003Cspan class=\"token operator\">|\u003C/span> Fish\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"2\">\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"3\">\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">removeBirds\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>arr\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>Bird \u003Cspan class=\"token operator\">|\u003C/span> Fish\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"4\">  \u003Cspan class=\"token keyword\">return\u003C/span> arr\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">filter\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>animal \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token string\">'swim'\u003C/span> \u003Cspan class=\"token keyword\">in\u003C/span> animal\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"5\">\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"6\">\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"7\">\u003Cspan class=\"token comment\">// We only wanted to filter out Birds, but the returned value\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"8\">\u003Cspan class=\"token comment\">// now reject Bird!\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"9\">\u003Cspan class=\"token keyword\">const\u003C/span> filteredAnimals \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token function\">removeBirds\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>animals\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"10\">filteredAnimals\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">push\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>newBird\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span> \u003Cspan class=\"token comment\">// Error since 5.5!\u003C/span>\n\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cimg src=\"/img/2024-05-18-ko-typescript-5-5-notable-changes/unwanted-inferred-type-predicate.png\" alt=\"unwanted-inferred-type-predicate\">\u003C/p>\n\u003Cp>이와 같은 경우에는 Explicit Type으로 해결할 수 있습니다.\u003C/p>\n\u003Cpre class=\"language-ts\">\u003Ccode class=\"language-ts code-highlight\">\u003Cspan class=\"code-line line-number\" line=\"1\">\u003Cspan class=\"token keyword\">const\u003C/span> filteredAnimals\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>Bird \u003Cspan class=\"token operator\">|\u003C/span> Fish\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token function\">removeBirds\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>animals\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch1 id=\"6-Control-Flow-Narrowing-for-Constant-Indexed-Accesses\">Control Flow Narrowing for Constant Indexed Accesses\u003C/h1>\n\u003Cp>이제 Object와 key가 constant 하다면 Type Narrowing 할 수 있습니다!\u003C/p>\n\u003Cpre class=\"language-ts\">\u003Ccode class=\"language-ts code-highlight\">\u003Cspan class=\"code-line line-number\" line=\"1\">\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">getDouble\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>obj\u003Cspan class=\"token operator\">:\u003C/span> Record\u003Cspan class=\"token operator\">&#x3C;\u003C/span>\u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token builtin\">number\u003C/span> \u003Cspan class=\"token operator\">|\u003C/span> \u003Cspan class=\"token keyword\">null\u003C/span>\u003Cspan class=\"token operator\">>\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> key\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">number\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"2\">    \u003Cspan class=\"token keyword\">if\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>obj\u003Cspan class=\"token punctuation\">[\u003C/span>key\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"3\">        \u003Cspan class=\"token keyword\">const\u003C/span> value \u003Cspan class=\"token operator\">=\u003C/span> obj\u003Cspan class=\"token punctuation\">[\u003C/span>key\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"4\">        \u003Cspan class=\"token comment\">// This is fine since 5.5!\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"5\">        \u003Cspan class=\"token keyword\">return\u003C/span> value \u003Cspan class=\"token operator\">*\u003C/span> \u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"6\">    \u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"7\">    \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"8\">\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>코드에서 \u003Ccode>obj\u003C/code> \u003Ccode>key\u003C/code> 둘 다 불변하기에 if 문 내부에서 \u003Ccode>obj[key]\u003C/code>가\n\u003Ccode>number\u003C/code> 타입임이 보장되나 타입스크립트는 이를 파악하지 못했습니다.\n하지만 이제 5.5 부터는 가능합니다!\u003C/p>",{"layout":3,"toc":4,"title":5,"category":6,"tags":8,"author":10},"post",true,"Typescript 5.5 주목할만한 변경점",[7],"Programming",[9],"typescript",[11],"이현재","2024-05-18","ko","05-18-ko-typescript-5-5-notable-changes",[16,20,24,27,30,33],{"depth":17,"id":18,"text":19},1,"1-Inferred-Type-Predicate","Inferred Type Predicate",{"depth":21,"id":22,"text":23},2,"2-이점","이점",{"depth":21,"id":25,"text":26},"3-추론-조건","추론 조건",{"depth":21,"id":28,"text":29},"4-Type-Guard가-이제-Flow-됩니다","Type Guard가 이제 Flow 됩니다",{"depth":21,"id":31,"text":32},"5-Breaking-Changes-in-Your-Code","Breaking Changes in Your Code",{"depth":17,"id":34,"text":35},"6-Control-Flow-Narrowing-for-Constant-Indexed-Accesses","Control Flow Narrowing for Constant Indexed Accesses",[13]],"uses":{"params":["year","slug"]}}]}
