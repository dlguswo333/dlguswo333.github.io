{"type":"data","nodes":[null,{"type":"data","data":[{"html":1,"frontmatter":2,"date":15,"lang":16,"id":17,"tocData":18,"langs":33},"\u003Cp>Routing (paths, specifically) is one of the essential parts when you create a web app.\nYou may want to take extra times designing the structure as it is not easy\nto change them as every single change may come as a breaking change.\nWeb browsers remember your website's URLs or even readers might have saved links to your pages.\u003C/p>\n\u003Ch1 id=\"1-Key-Points\">Key Points\u003C/h1>\n\u003Cp>There are some key points which I considered when creating my new blog.\u003C/p>\n\u003Cp>\u003Cstrong>Each routes should not overlap each other\u003C/strong>.\u003Cbr>\nEach route (path) should not intrude on others.\nWhat I mean by domain are these two: semantics and URLs.\u003Cbr>\nThere is no need you should have two separate routes \u003Ccode>post\u003C/code> and \u003Ccode>article\u003C/code>\nunless they are completely different in the context.\nEach domain should have distinct semantic.\u003Cbr>\nAlso, you are required not to have overlapping URLs.\nThis sounds so obvious, but this is the point where routes play important roles.\nGood route designs can exclude unforeseen overlapping URLs in the future.\nSome endpoints may have the same name thus the same end path,\nbut it will be okay as long as they are served at different parent paths!\u003C/p>\n\u003Cp>\u003Cimg src=\"/img/2024-03-16-en-migrate-blog-to-sveltekit-routing/good-routing-design.png\" alt=\"routing\">\u003C/p>\n\u003Cp>Also you might want to \u003Cstrong>consider file structure\u003C/strong>.\u003Cbr>\nRecently some of famous web frameworks are introducing folder routing structure.\nOne of examples is Next.JS 13, \u003Ca href=\"https://nextjs.org/docs/app/building-your-application/routing\">\u003Cem>App Router\u003C/em>\u003C/a>.\nSveltekit uses the same routing mechanisms.\nSo consider your routes carefully as they are going to be your source code folder structure.\u003C/p>\n\u003Cp>The last one is about \u003Cstrong>Readability\u003C/strong>.\u003Cbr>\nURLs are visible to users on web browsers.\nThey are not meant to be readable, but they look much nicer if they are.\u003C/p>\n\u003Ch1 id=\"2-My-Design\">My Design\u003C/h1>\n\u003Cp>Here is my blog's humble design.\n\u003Cimg src=\"/img/2024-03-16-en-migrate-blog-to-sveltekit-routing/routing-structure.png\" alt=\"routing\">\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>/\u003C/code>\u003Cbr>\nThe root page. shows all my blogs in time order, using pagination.\u003C/li>\n\u003Cli>\u003Ccode>/about\u003C/code>\u003Cbr>\nShows information about me. This renders a markdown file.\u003C/li>\n\u003Cli>\u003Ccode>/post/{year}{post-name}\u003C/code>\u003Cbr>\nThis is distinct from \u003Ccode>/posts\u003C/code>.\nI did not want to include year in the URL path at first, but it was necessary to find markdown files in the file structure easily.\u003Cbr>\nThe file path for blog post is \u003Ccode>/post/{year}/{lang}-{month}-{date}-{post-name}\u003C/code>. For example, the URL path for a post file \u003Ccode>markdown/2023/01-01/eng-learn-svelte.md\u003C/code> is \u003Ccode>/2023/01-01-eng-learn-svelte\u003C/code>.\u003Cbr>\nI thought about giving language a separate URL segment, but it would give readers a falsy impression that each post is provided with multiple languages but... I am lazy. The \u003Ccode>lang\u003C/code> follows \u003Ca href=\"https://www.loc.gov/standards/iso639-2/php/code_list.php\">\u003Cem>ISO 639-2 Code\u003C/em>\u003C/a>.\u003C/li>\n\u003Cli>\u003Ccode>/posts/{num}\u003C/code>\u003Cbr>\nThis is where paginated post lists are rendered.\u003C/li>\n\u003Cli>\u003Ccode>/categories\u003C/code>\u003Cbr>\nLists every category per each category. No pagination.\u003C/li>\n\u003Cli>\u003Ccode>/tags\u003C/code>\u003Cbr>\nLists every post per each tag. No pagination.\u003C/li>\n\u003C/ul>\n\u003Cblockquote>\n\u003Cp>Category and tag are different.\ncategory : post is 1:N relation but tag : post is M : N relation.\nA post may have up to one category but many tags.\u003C/p>\n\u003C/blockquote>\n\u003Ch1 id=\"3-Sveltekit-Routing\">Sveltekit Routing\u003C/h1>\n\u003Cp>First check out Sveltekit \u003Ca href=\"https://kit.svelte.dev/docs/routing\">routing document\u003C/a>.\nAs I mentioned earlier basically you create a folder \u003Ccode>src/routes\u003C/code> which will be your app's root\nand each nested folder will be also a nested path.\u003C/p>\n\u003Cblockquote>\n\u003Cp>You can change \u003Ccode>src/routes\u003C/code> to a different directory by editing the project config.\nSee \u003Ccode>routes\u003C/code> option in Sveltekit config \u003Ca href=\"https://kit.svelte.dev/docs/configuration\">document\u003C/a>.\u003C/p>\n\u003C/blockquote>\n\u003Cp>In each route, you make \u003Ccode>+page.svelte\u003C/code> file; it becames a visitable page.\nIt means \u003Ccode>+page.svelte\u003C/code> file at \u003Ccode>src/routes\u003C/code> directory creates the root page.\u003C/p>\n\u003Cblockquote>\n\u003Cp>Every \u003Ccode>+page.svelte\u003C/code> file inside \u003Ccode>src/routes\u003C/code> creates a page in your app.\u003Cbr>\n\u003Ca href=\"https://learn.svelte.dev/tutorial/pages\">https://learn.svelte.dev/tutorial/pages\u003C/a>\u003C/p>\n\u003C/blockquote>\n\u003Cp>The key point of \u003Ccode>+page.svelte\u003C/code> is that it does not show up at nested paths.\nSay you have a header component that will be visible at every path.\nEven if you do, you do not need to include the header component in every \u003Ccode>+page.svelte\u003C/code> file,\nyou can do that with single \u003Ccode>+layout.svelte\u003C/code> file.\u003C/p>\n\u003Cp>\u003Ccode>+layout.svelte\u003C/code> is a file where you can declare the common component at the path and its all child paths.\u003C/p>\n\u003Cpre class=\"language-jsx\">\u003Ccode class=\"language-jsx code-highlight\">\u003Cspan class=\"code-line line-number\" line=\"1\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>\u003Cspan class=\"token class-name\">Header\u003C/span>\u003C/span> \u003Cspan class=\"token punctuation\">/>\u003C/span>\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"2\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>\u003Cspan class=\"token class-name\">Slot\u003C/span>\u003C/span> \u003Cspan class=\"token punctuation\">/>\u003C/span>\u003C/span>\n\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Ccode>&#x3C;Slot /> is where each \u003C/code>+page.svelte` will be rendered.\u003C/p>\n\u003Cp>But a question arises here: Where should the header component file be placed?\nSveletekit document tells us to put it to the topmost directory where it is used.\nIf the topmost path is \u003Ccode>/\u003C/code>, it would be best to be placed at \u003Ccode>src/routes/\u003C/code> directory.\u003C/p>\n\u003Cp>Also, if the same component is shared among different paths (eg. \u003Ccode>/post/author\u003C/code>, \u003Ccode>/about/me\u003C/code>),\nit recommends placing the file to someplace else so referers can easily import them such as \u003Ccode>lib\u003C/code> folder.\u003C/p>\n\u003Cblockquote>\n\u003Cp>Because SvelteKit uses directory-based routing, it's easy to place modules and components alongside the routes that use them. A good rule of thumb is 'put code close to where it's used'.\u003Cbr>\n...\u003Cbr>\nSometimes, code is used in multiple places. When this happens, it's useful to have a place to put them that can be accessed by all routes without needing to prefix imports with \u003Ccode>../../../../\u003C/code>. In SvelteKit, that place is the \u003Ccode>src/lib\u003C/code> directory. Anything inside this directory can be accessed by any module in \u003Ccode>src\u003C/code> via the \u003Ccode>$lib\u003C/code> alias.\u003Cbr>\n\u003Ca href=\"https://learn.svelte.dev/tutorial/lib\">https://learn.svelte.dev/tutorial/lib\u003C/a>\u003C/p>\n\u003C/blockquote>\n\u003Ch2 id=\"4-trailingSlash\">\u003Ccode>trailingSlash\u003C/code>\u003C/h2>\n\u003Cp>It's also important to note that sometimes, trailing slash in URL matters.\nTo put it simple with an example,\nit's about which one path \u003Ccode>/a\u003C/code> or \u003Ccode>/a/\u003C/code> should be accessible and\nhtml file being served at the path should be placed as \u003Ccode>/a/index.html\u003C/code> or \u003Ccode>/a.html\u003C/code>.\nIt's not just about which URL is \u003Cem>looking cool\u003C/em>, your link may be broken with 404 error.\u003C/p>\n\u003Cp>Be aware that which URL is accessible depends on which hosting provider your website is hosted.\u003C/p>\n\u003Cp>Check out Sveletekit's \u003Ccode>trailingSlash\u003C/code> layout option \u003Ca href=\"https://kit.svelte.dev/docs/page-options#trailingslash\">document\u003C/a>.\nAlso this \u003Ca href=\"https://github.com/slorber/trailing-slash-guide\">trailing slash guide\u003C/a>. This guide is highly valuable.\u003C/p>",{"toc":3,"title":4,"category":5,"tags":7,"author":13},true,"Let's Migrate Github Blog to Sveltekit: Routing",[6],"Programming",[8,9,10,11,12],"migrate-blog-to-sveltekit","web","svelte","sveltekit","javascript",[14],"이현재","2024-03-16","en","03-16-en-migrate-blog-to-sveltekit-routing",[19,23,26,29],{"depth":20,"id":21,"text":22},1,"1-Key-Points","Key Points",{"depth":20,"id":24,"text":25},"2-My-Design","My Design",{"depth":20,"id":27,"text":28},"3-Sveltekit-Routing","Sveltekit Routing",{"depth":30,"id":31,"text":32},2,"4-trailingSlash","trailingSlash",[16]],"uses":{"params":["year","slug"]}}]}
