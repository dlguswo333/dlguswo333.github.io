{"type":"data","nodes":[null,{"type":"data","data":[{"html":1,"frontmatter":2,"date":12,"lang":13,"id":14,"tocData":15,"langs":36},"\u003Cp>Typescript 5.5 beta has been released on April 25th, 2024!\u003Cbr>\n\u003Ca href=\"https://devblogs.microsoft.com/typescript/announcing-typescript-5-5-beta\">https://devblogs.microsoft.com/typescript/announcing-typescript-5-5-beta\u003C/a>\u003Cbr>\nAs always has been, this new update brings lots of changes,\nBut there are some exceptional changes related to type checking\nso let me introduce those things.\u003C/p>\n\u003Ch1 id=\"1-Inferred-Type-Predicate\">Inferred Type Predicate\u003C/h1>\n\u003Cp>Let us say there are two types \u003Ccode>Bird\u003C/code>, \u003Ccode>Fish\u003C/code> and a variable with type of union of the two.\u003C/p>\n\u003Cpre class=\"language-ts\">\u003Ccode class=\"language-ts code-highlight\">\u003Cspan class=\"code-line line-number\" line=\"1\">\u003Cspan class=\"token keyword\">type\u003C/span> \u003Cspan class=\"token class-name\">Bird\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"2\">    \u003Cspan class=\"token function-variable function\">fly\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token keyword\">void\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"3\">\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"4\">\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"5\">\u003Cspan class=\"token keyword\">type\u003C/span> \u003Cspan class=\"token class-name\">Fish\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"6\">    \u003Cspan class=\"token function-variable function\">swim\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token keyword\">void\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"7\">\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"8\">\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"9\">\u003Cspan class=\"token keyword\">declare\u003C/span> \u003Cspan class=\"token keyword\">const\u003C/span> animal\u003Cspan class=\"token operator\">:\u003C/span> Bird \u003Cspan class=\"token operator\">|\u003C/span> Fish\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>You want to execute different lines of code according to the type of the variable.\nIn previous Typescript you would either have if statement:\u003C/p>\n\u003Cpre class=\"language-ts\">\u003Ccode class=\"language-ts code-highlight\">\u003Cspan class=\"code-line line-number\" line=\"1\">\u003Cspan class=\"token keyword\">if\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">'swim'\u003C/span> \u003Cspan class=\"token keyword\">in\u003C/span> animal\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"2\">    animal\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">swim\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"3\">\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Else define a type checking funtion: \u003Cem>User-defined Type Guard\u003C/em>\nto check the type.\u003C/p>\n\u003Cpre class=\"language-ts\">\u003Ccode class=\"language-ts code-highlight\">\u003Cspan class=\"code-line line-number\" line=\"1\">\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">getIsBird\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>animal\u003Cspan class=\"token operator\">:\u003C/span> Bird \u003Cspan class=\"token operator\">|\u003C/span> Fish\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> animal \u003Cspan class=\"token keyword\">is\u003C/span> Bird \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"2\">    \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token string\">'fly'\u003C/span> \u003Cspan class=\"token keyword\">in\u003C/span> animal\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"3\">\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Such functions that returns a \u003Ccode>arg is Type\u003C/code> boolean are called \u003Cem>Type Guard\u003C/em> functions.\u003C/p>\n\u003Cblockquote>\n\u003Cp>To define a user-defined type guard, we simply need to define\na function whose return type is a type predicate:\u003Cbr>\n\u003Ca href=\"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates\">https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates\u003C/a>\u003C/p>\n\u003C/blockquote>\n\u003Cp>However when you define such separate functions you need to define Type Predicate\nas the return type else Typescript would not narrow the target parameter type!\u003C/p>\n\u003Cpre class=\"language-ts\">\u003Ccode class=\"language-ts code-highlight\">\u003Cspan class=\"code-line line-number\" line=\"1\">\u003Cspan class=\"token comment\">// Typescript does not see it as type guard function; it just returns a boolean!\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"2\">\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">getIsBird\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>animal\u003Cspan class=\"token operator\">:\u003C/span> Bird \u003Cspan class=\"token operator\">|\u003C/span> Fish\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"3\">    \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token string\">'fly'\u003C/span> \u003Cspan class=\"token keyword\">in\u003C/span> animal\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"4\">\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"5\">\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"6\">\u003Cspan class=\"token keyword\">if\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token function\">getIsBird\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>animal\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"7\">    animal\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">fly\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span> \u003Cspan class=\"token comment\">// This line emits error!\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"8\">\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cimg src=\"/img/2024-05-18-ko-typescript-5-5-notable-changes/no-type-predicate-function-error.png\" alt=\"no-type-predicate-function-error\">\u003C/p>\n\u003Cp>There is no issue in the logics. After checking the type \u003Ccode>animal\u003C/code> is guranteed to be \u003Ccode>Bird\u003C/code> type\nand \u003Ccode>animal\u003C/code> variable has not been changed.\nIt was just because Typescript could not handle it.\u003C/p>\n\u003Cp>But from 5.5 Typescript can handle this!\u003C/p>\n\u003Cpre class=\"language-ts\">\u003Ccode class=\"language-ts code-highlight\">\u003Cspan class=\"code-line line-number\" line=\"1\">\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">getIsBird\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>animal\u003Cspan class=\"token operator\">:\u003C/span> Bird \u003Cspan class=\"token operator\">|\u003C/span> Fish\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"2\">    \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token string\">'fly'\u003C/span> \u003Cspan class=\"token keyword\">in\u003C/span> animal\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"3\">\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"4\">\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"5\">\u003Cspan class=\"token keyword\">if\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token function\">getIsBird\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>animal\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"6\">    animal\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">fly\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span> \u003Cspan class=\"token comment\">// This is fine since 5.5!\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"7\">\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>You can see from type definition of function with LSP it implicitly check the type.\nsince it can infer the type Type Predciate is denoted as return type.\u003C/p>\n\u003Cp>\u003Cimg src=\"/img/2024-05-18-ko-typescript-5-5-notable-changes/inferred-type-predicate.png\" alt=\"inferred-type-predicate\">\u003C/p>\n\u003Ch2 id=\"2-Advantages\">Advantages\u003C/h2>\n\u003Cp>The most prominent Advantage is that you do not need to denote Type Predicate.\u003Cbr>\nBut From that onwards, because inference also works on arrow functions,\nType narrowing are added to the codes that had not been\nsuch as \u003Ccode>Array.filter(v => v !== null)\u003C/code>!\u003C/p>\n\u003Cpre class=\"language-ts\">\u003Ccode class=\"language-ts code-highlight\">\u003Cspan class=\"code-line line-number\" line=\"1\">\u003Cspan class=\"token keyword\">declare\u003C/span> \u003Cspan class=\"token keyword\">const\u003C/span> animals\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>Bird \u003Cspan class=\"token operator\">|\u003C/span> Fish\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"2\">\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"3\">\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">getIsBird\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>animal\u003Cspan class=\"token operator\">:\u003C/span> Bird \u003Cspan class=\"token operator\">|\u003C/span> Fish\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> animal \u003Cspan class=\"token keyword\">is\u003C/span> Bird \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"4\">  \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token string\">'fly'\u003C/span> \u003Cspan class=\"token keyword\">in\u003C/span> animal\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"5\">\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"6\">\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"7\">\u003Cspan class=\"token comment\">// We used to write this way.\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"8\">\u003Cspan class=\"token keyword\">const\u003C/span> birds \u003Cspan class=\"token operator\">=\u003C/span> animals\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"9\">    \u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">filter\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>getIsBird\u003Cspan class=\"token punctuation\">)\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"10\">    \u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">forEach\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>animal \u003Cspan class=\"token operator\">=>\u003C/span> animal\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">fly\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"11\">\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"12\">\u003Cspan class=\"token comment\">// This is fine since 5.5!\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"13\">\u003Cspan class=\"token keyword\">const\u003C/span> birds \u003Cspan class=\"token operator\">=\u003C/span> animals\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"14\">  \u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">filter\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>animal \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token string\">'fly'\u003C/span> \u003Cspan class=\"token keyword\">in\u003C/span> animal\u003Cspan class=\"token punctuation\">)\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"15\">  \u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">forEach\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>animal \u003Cspan class=\"token operator\">=>\u003C/span> animal\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">fly\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>You don't need to define Type Guard function separately!\u003C/p>\n\u003Ch2 id=\"3-Inference-Condition\">Inference Condition\u003C/h2>\n\u003Cp>From Typescript 5.5 even functions without Type Predicate\nwill be \u003Cem>inferred\u003C/em> to return Type Predicate if they hold the following conditions.\nMost of the times they will be inferred well\nif you wrote them in the way you would normally write Type Guard function.\u003C/p>\n\u003Col>\n\u003Cli>There should be no denoted return types or Type Predicate.\u003C/li>\n\u003Cli>There should be only one \u003Ccode>return\u003C/code> statement and no implicit returns.\u003C/li>\n\u003Cli>It should not modify the parameter.\u003C/li>\n\u003Cli>It should return \u003Ccode>boolean\u003C/code> expression with respect to the parameter.\u003C/li>\n\u003C/ol>\n\u003Cp>As with the first condition, you shouldn't even denote \u003Ccode>boolean\u003C/code> return type.\nAnd there is no meaning of inference if it explicitly returns Type Predicate.\u003C/p>\n\u003Cp>The second one tells that the inference needs the function to return explicitly.\nAlso keep in mind the return statement should not be more than one.\nThe next codes are examples of no inference.\u003C/p>\n\u003Cpre class=\"language-ts\">\u003Ccode class=\"language-ts code-highlight\">\u003Cspan class=\"code-line line-number\" line=\"1\">\u003Cspan class=\"token comment\">// No Inferred Type Predicate\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"2\">\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">getIsBird\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>animal\u003Cspan class=\"token operator\">:\u003C/span> Bird \u003Cspan class=\"token operator\">|\u003C/span> Fish\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span> \n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"3\">  \u003Cspan class=\"token keyword\">if\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">'fly'\u003C/span> \u003Cspan class=\"token keyword\">in\u003C/span> animal\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"4\">    \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token boolean\">true\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"5\">  \u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"6\">  \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token boolean\">false\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"7\">\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"8\">\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"9\">\u003Cspan class=\"token comment\">// No Inferred Type Predicate\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"10\">\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">getIsBirdNotFishOrDog\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>animal\u003Cspan class=\"token operator\">:\u003C/span> Bird \u003Cspan class=\"token operator\">|\u003C/span> Fish \u003Cspan class=\"token operator\">|\u003C/span> Dog\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"11\">  \u003Cspan class=\"token keyword\">if\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">'bark'\u003C/span> \u003Cspan class=\"token keyword\">in\u003C/span> animal\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"12\">    \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token boolean\">false\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"13\">  \u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"14\">  \u003Cspan class=\"token keyword\">if\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">'swim'\u003C/span> \u003Cspan class=\"token keyword\">in\u003C/span> animal\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"15\">    \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token boolean\">false\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"16\">  \u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"17\">  \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token boolean\">true\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"18\">\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The fourth means that you need to actually inspect the type of parameter\nso that Typescript check the code path which would return \u003Ccode>true\u003C/code> or \u003Ccode>false\u003C/code>\nto infer Type Predicate.\nFor example the below would not work as it does not tell Typescript anything.\u003C/p>\n\u003Cpre class=\"language-ts\">\u003Ccode class=\"language-ts code-highlight\">\u003Cspan class=\"code-line line-number\" line=\"1\">\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">getIsBird\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>animal\u003Cspan class=\"token operator\">:\u003C/span> Bird \u003Cspan class=\"token operator\">|\u003C/span> Fish\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"2\">  \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token boolean\">true\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"3\">\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Oddly the following code does not work either.\nIf the returned value is \u003Ccode>true\u003C/code> it does mean that \u003Ccode>animal\u003C/code> is of \u003Ccode>Bird\u003C/code> type.\u003Cbr>\nIf you read the pull request of Inferred Type Predicate,\nType Guard must be \u003Cem>if and only if\u003C/em>.\nThus \u003Ccode>return 'fly' in animal &#x26;&#x26; Math.random() > 0.5\u003C/code> code\nmay return different boolean values according to the right hand side operator\neven though it is handed a \u003Ccode>Bird\u003C/code> parameter;\nas a result it is not a Type Guard function.\nNevertheless it does not quite explain why \u003Ccode>&#x26;&#x26; true\u003C/code> is not a Type Guard expression.\u003C/p>\n\u003Cpre class=\"language-ts\">\u003Ccode class=\"language-ts code-highlight\">\u003Cspan class=\"code-line line-number\" line=\"1\">\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">getIsBird\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>animal\u003Cspan class=\"token operator\">:\u003C/span> Bird \u003Cspan class=\"token operator\">|\u003C/span> Fish\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"2\">  \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token string\">'fly'\u003C/span> \u003Cspan class=\"token keyword\">in\u003C/span> animal \u003Cspan class=\"token operator\">&#x26;&#x26;\u003C/span> \u003Cspan class=\"token boolean\">true\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"3\">\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003C/code>\u003C/pre>\n\u003Cbr>\n\u003Cp>There are more details that I could not introduce about Inferred Type Predicate,\nso for more please visite the official documentation and PR.\u003C/p>\n\u003Cp>\u003Ca href=\"https://devblogs.microsoft.com/typescript/announcing-typescript-5-5-beta/#inferred-type-predicates\">https://devblogs.microsoft.com/typescript/announcing-typescript-5-5-beta/#inferred-type-predicates\u003C/a>\n\u003Ca href=\"https://github.com/microsoft/TypeScript/pull/57465\">https://github.com/microsoft/TypeScript/pull/57465\u003C/a>\u003C/p>\n\u003Ch2 id=\"4-Type-Guard-Now-Flows\">Type Guard Now Flows\u003C/h2>\n\u003Cp>Now Type Guard in TypeScript now Flows!\nThat means, if you wrap a Type Guard function and return it as is\nType Predicate would be deprecated.\nBut as told earlier, since Type Predicate is now inferred, Type Predicate is also preserved.\u003C/p>\n\u003Cpre class=\"language-ts\">\u003Ccode class=\"language-ts code-highlight\">\u003Cspan class=\"code-line line-number\" line=\"1\">\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">getIsBird\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>animal\u003Cspan class=\"token operator\">:\u003C/span> Bird \u003Cspan class=\"token operator\">|\u003C/span> Fish\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"2\">  \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token string\">'fly'\u003C/span> \u003Cspan class=\"token keyword\">in\u003C/span> animal\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"3\">\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"4\">\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"5\">\u003Cspan class=\"token comment\">// This function returns type predicate since 5.5!\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"6\">\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">wrappedGetIsBird\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>animal\u003Cspan class=\"token operator\">:\u003C/span> Bird \u003Cspan class=\"token operator\">|\u003C/span> Fish\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"7\">  \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token function\">getIsBird\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>animal\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"8\">\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"5-Breaking-Changes-in-Your-Code\">Breaking Changes in Your Code\u003C/h2>\n\u003Cp>From 5.5 as long as for normal functions if they hold the inference conditions\nthey will return Type Predicate not \u003Ccode>boolean\u003C/code>.\nIt means variable types could have changed unintentionally\nand leads to unwanted type errors.\u003C/p>\n\u003Cp>Even though type narrowing is not needed,\nsince Inferred Type Predicates check the types.\nIf you try to assign a value of type which is filtered out\nit may throws an error.\u003C/p>\n\u003Cpre class=\"language-ts\">\u003Ccode class=\"language-ts code-highlight\">\u003Cspan class=\"code-line line-number\" line=\"1\">\u003Cspan class=\"token keyword\">declare\u003C/span> \u003Cspan class=\"token keyword\">const\u003C/span> animals\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>Bird \u003Cspan class=\"token operator\">|\u003C/span> Fish\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"2\">\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"3\">\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">removeBirds\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>arr\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>Bird \u003Cspan class=\"token operator\">|\u003C/span> Fish\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"4\">  \u003Cspan class=\"token keyword\">return\u003C/span> arr\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">filter\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>animal \u003Cspan class=\"token operator\">=>\u003C/span> \u003Cspan class=\"token string\">'swim'\u003C/span> \u003Cspan class=\"token keyword\">in\u003C/span> animal\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"5\">\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"6\">\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"7\">\u003Cspan class=\"token comment\">// We only wanted to filter out Birds, but the returned value\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"8\">\u003Cspan class=\"token comment\">// now reject Bird!\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"9\">\u003Cspan class=\"token keyword\">const\u003C/span> filteredAnimals \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token function\">removeBirds\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>animals\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"10\">filteredAnimals\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token function\">push\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>newBird\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span> \u003Cspan class=\"token comment\">// Error since 5.5!\u003C/span>\n\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cimg src=\"/img/2024-05-18-ko-typescript-5-5-notable-changes/unwanted-inferred-type-predicate.png\" alt=\"unwanted-inferred-type-predicate\">\u003C/p>\n\u003Cp>Cases like this can be handled with explicit typings.\u003C/p>\n\u003Cpre class=\"language-ts\">\u003Ccode class=\"language-ts code-highlight\">\u003Cspan class=\"code-line line-number\" line=\"1\">\u003Cspan class=\"token keyword\">const\u003C/span> filteredAnimals\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>Bird \u003Cspan class=\"token operator\">|\u003C/span> Fish\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token function\">removeBirds\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>animals\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch1 id=\"6-Control-Flow-Narrowing-for-Constant-Indexed-Accesses\">Control Flow Narrowing for Constant Indexed Accesses\u003C/h1>\n\u003Cp>Now as long as an object and a key are constant it can be type-narrowed!\u003C/p>\n\u003Cpre class=\"language-ts\">\u003Ccode class=\"language-ts code-highlight\">\u003Cspan class=\"code-line line-number\" line=\"1\">\u003Cspan class=\"token keyword\">function\u003C/span> \u003Cspan class=\"token function\">getDouble\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>obj\u003Cspan class=\"token operator\">:\u003C/span> Record\u003Cspan class=\"token operator\">&#x3C;\u003C/span>\u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token builtin\">number\u003C/span> \u003Cspan class=\"token operator\">|\u003C/span> \u003Cspan class=\"token keyword\">null\u003C/span>\u003Cspan class=\"token operator\">>\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> key\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">string\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token builtin\">number\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"2\">    \u003Cspan class=\"token keyword\">if\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>obj\u003Cspan class=\"token punctuation\">[\u003C/span>key\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"3\">        \u003Cspan class=\"token keyword\">const\u003C/span> value \u003Cspan class=\"token operator\">=\u003C/span> obj\u003Cspan class=\"token punctuation\">[\u003C/span>key\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"4\">        \u003Cspan class=\"token comment\">// This is fine since 5.5!\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"5\">        \u003Cspan class=\"token keyword\">return\u003C/span> value \u003Cspan class=\"token operator\">*\u003C/span> \u003Cspan class=\"token number\">2\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"6\">    \u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"7\">    \u003Cspan class=\"token keyword\">return\u003C/span> \u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"8\">\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>In the code above as both \u003Ccode>obj\u003C/code> and \u003Ccode>key\u003C/code> are constant,\ninside the if block \u003Ccode>obj[key]\u003C/code> is gurantedd to be of \u003Ccode>number\u003C/code> type\nbut Typescript did not notice it.\nBut since 5.5 it can!\u003C/p>",{"layout":3,"toc":4,"title":5,"category":6,"tags":8,"author":10},"post",true,"Typescript 5.5 Noticeable Changes",[7],"Programming",[9],"typescript",[11],"이현재","2024-05-18","en","05-18-en-typescript-5-5-notable-changes",[16,20,24,27,30,33],{"depth":17,"id":18,"text":19},1,"1-Inferred-Type-Predicate","Inferred Type Predicate",{"depth":21,"id":22,"text":23},2,"2-Advantages","Advantages",{"depth":21,"id":25,"text":26},"3-Inference-Condition","Inference Condition",{"depth":21,"id":28,"text":29},"4-Type-Guard-Now-Flows","Type Guard Now Flows",{"depth":21,"id":31,"text":32},"5-Breaking-Changes-in-Your-Code","Breaking Changes in Your Code",{"depth":17,"id":34,"text":35},"6-Control-Flow-Narrowing-for-Constant-Indexed-Accesses","Control Flow Narrowing for Constant Indexed Accesses",[37,13],"ko"],"uses":{"params":["year","slug"]}}]}
