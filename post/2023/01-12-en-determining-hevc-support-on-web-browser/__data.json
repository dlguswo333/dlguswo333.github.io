{"type":"data","nodes":[null,{"type":"data","data":[{"html":1,"frontmatter":2,"date":14,"lang":15,"id":16,"tocData":17,"langs":31},"\u003Cp align=\"center\">\n  \u003Cimg height=\"50\" src=\"https://www.chromium.org/_assets/icon-chromium-96.png\" alt=\"chromium-logo\">\n\u003C/p>\n\u003Ch1 id=\"1-1.-Abstraction\">1. Abstraction\u003C/h1>\n\u003Cp>We are going to learn how to determine whether a device\nsupports HEVC videos on Web Browser, mainly recent versions of Chromium.\u003C/p>\n\u003C!--more-->\n\u003Ch1 id=\"2-2.-Introduction\">2. Introduction\u003C/h1>\n\u003Cp>On recent releases of Chromium, starting from version 107,\nHEVC, H.265 video format is being supported.\u003C/p>\n\u003Cp>\u003Cimg src=\"/img/2023-01-12-determining-hevc-support-on-web-browser/caniuse-hevc.png\" alt=\"caniuse-hevc\">\u003C/p>\n\u003Cp>In detail, HEVC videos are playable if you are using chromium 107 or later,\nand Windows 8 or later, or Big Sur if you are on Mac, or Chromium > 108\nif you are on Linux, and \u003Cstrong>with Hardware Support\u003C/strong>.\nCheck out \u003Ca href=\"https://caniuse.com/?search=hevc\">https://caniuse.com/?search=hevc\u003C/a> if you want to see it by yourself.\nAlso, you can check if your browsers can play HEVC videos in the link:\n\u003Ca href=\"https://cconcolato.github.io/media-mime-support/#other_video_codecs\">https://cconcolato.github.io/media-mime-support/#other_video_codecs\u003C/a>\u003C/p>\n\u003Cp>It's quite surprising to see Chromium support started very recently\nconsidering that HEVC videos has become ubiquitous and most devices\nhave started supporting HEVC natively for more than half a decade.\u003C/p>\n\u003Cp>Anyway, to provide Web users with the best quality videos,\nWeb developers might want to provide H.265 videos over\nH.264 ones for those who are qualified.\nBut Also, you need to provide fallback H.264 videos for those who are not qualified.\u003C/p>\n\u003Cp>You may think of a \u003Ccode>video\u003C/code> element with several \u003Ccode>source\u003C/code> elements inside.\u003C/p>\n\u003Cpre class=\"language-html\">\u003Ccode class=\"language-html code-highlight\">\u003Cspan class=\"code-line line-number\" line=\"1\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>video\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"2\">    \u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>source\u003C/span> \u003Cspan class=\"token attr-name\">src\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>/h265.mp4\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span> \u003Cspan class=\"token attr-name\">type\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>video/mp4\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"3\">    \u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>source\u003C/span> \u003Cspan class=\"token attr-name\">src\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>/h264.mp4\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span> \u003Cspan class=\"token attr-name\">type\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>video/mp4\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"4\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;/\u003C/span>video\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>If you specify HEVC video source first, Web Browser will try to show the HEVC video\nfirst, then H.264 video.\n\u003Cstrong>However\u003C/strong>, if you test on devices without HEVC support,\nyou might witness that it malfunctions, showing the HEVC video,\non recent Chromium browsers.\u003C/p>\n\u003Cp>This is because you did not provide detailed \u003Ccode>type\u003C/code> of the video.\nWeb browsers, at least Chromiums, do not know or care whether\na video file is actually playable or not.\nYou need to specify what \u003Ccode>codecs\u003C/code> the video is encoded with.\nThus, you need to find a way to specify HEVC codecs.\u003C/p>\n\u003Cp>Most of online resources tell you that\nyou can put \u003Ccode>codecs=\"hvc1\"\u003C/code>, like below.\u003C/p>\n\u003Cpre class=\"language-html\">\u003Ccode class=\"language-html code-highlight\">\u003Cspan class=\"code-line line-number\" line=\"1\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>source\u003C/span> \u003Cspan class=\"token attr-name\">src\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">\"\u003C/span>/h265.mp4\u003Cspan class=\"token punctuation\">\"\u003C/span>\u003C/span> \u003Cspan class=\"token attr-name\">type\u003C/span>\u003Cspan class=\"token attr-value\">\u003Cspan class=\"token punctuation attr-equals\">=\u003C/span>\u003Cspan class=\"token punctuation\">'\u003C/span>video/mp4; codecs=\"hvc1\"\u003Cspan class=\"token punctuation\">'\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n\u003C/span>\u003C/code>\u003C/pre>\n\u003Cblockquote>\n\u003Cp>\u003Cstrong>NOTE\u003C/strong> You can alternatively use \u003Ccode>type=\"video/mp4; codecs=&#x26;quot;hvc1&#x26;quot\"\u003C/code>\nIf you want to wrap the string inside double quotes.\u003C/p>\n\u003C/blockquote>\n\u003Cp>...or \u003Ccode>codecs=\"hev1\"\u003C/code>. \u003Ccode>hvc\u003C/code> and \u003Ccode>hev\u003C/code> are synonyms, at least\nin the world of \u003Ccode>source\u003C/code> elements.\u003C/p>\n\u003Cp>However, \u003Cstrong>this is again wrong\u003C/strong>. Test the following JavaScript code on Chromium browsers\nwith HEVC support.\u003C/p>\n\u003Cpre class=\"language-js\">\u003Ccode class=\"language-js code-highlight\">\u003Cspan class=\"code-line line-number\" line=\"1\">\u003Cspan class=\"token keyword\">const\u003C/span> video \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token dom variable\">document\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token method function property-access\">createElement\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">'video'\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"2\">\u003Cspan class=\"token console class-name\">console\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token method function property-access\">log\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>video\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token method function property-access\">canPlayType\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">'video/mp4; codecs=\"hvc1\"'\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\n\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>On Chrome 108, it logs an empty string \u003Ccode>''\u003C/code> meaning that the browser cannot play\nthat type of videos.\nHowever, On Safari on Monterey M1 Mac, it shows \u003Ccode>'probably'\u003C/code>!\nWhy does this happen?\u003C/p>\n\u003Ch1 id=\"3-3.-Why-codecs=hvc1-doesnt-work-on-Chromium\">3. Why \u003Ccode>codecs=\"hvc1\"\u003C/code> doesn't work on Chromium\u003C/h1>\n\u003Cp>This is because Chromium's intention to strictly oppose\nusing ambiguous codec identifiers for HEVC.\nRefer to Chromium's test code on \u003Ccode>canPlayType\u003C/code>.\nAs you can see from the link, this is source code of Chromium 108.\u003C/p>\n\u003Cp>\u003Ca href=\"https://chromium.googlesource.com/chromium/src/+/refs/tags/108.0.5359.181/content/test/data/media/canplaytype_test.js\">https://chromium.googlesource.com/chromium/src/+/refs/tags/108.0.5359.181/content/test/data/media/canplaytype_test.js\u003C/a>\u003C/p>\n\u003Cpre class=\"language-js\">\u003Ccode class=\"language-js code-highlight\">\u003Cspan class=\"code-line line-number\" line=\"1\">\u003Cspan class=\"token comment\">// Copyright 2020 The Chromium Authors\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"2\">\u003Cspan class=\"token comment\">// Use of this source code is governed by a BSD-style license that can be\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"3\">\u003Cspan class=\"token comment\">// found in the LICENSE file.\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"4\">\u003Cspan class=\"token spread operator\">...\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"5\">\u003Cspan class=\"token comment\">// Don't allow incomplete/ambiguous codec ids for HEVC.\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"6\">\u003Cspan class=\"token comment\">// Codec string must have info about codec level/profile, as described in\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"7\">\u003Cspan class=\"token comment\">// ISO/IEC FDIS 14496-15 section E.3, for example \"hev1.1.6.L93.B0\"\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"8\">\u003Cspan class=\"token string\">'hev1'\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"9\">\u003Cspan class=\"token string\">'hvc1'\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This clearly shows that Chromium outputs an empty string to suppress the use of\nincomplete codecs identifiers. There are numerous codecs and profiles within HEVC.\nSaying \u003Ccode>probably\u003C/code> on ambiguous specifications may result in unintended errors.\nWhat if the device does support HEVC 8 bit depth videos\nbut not HEVC 10 bit depth videos?\nWhat if the video resolution is so huge, like 8K (\u003Cem>7680x4320\u003C/em>)?\nDoes every device with H.265 support support that large resolution?\u003C/p>\n\u003Cp>Therefore, in order to \u003Cem>correctly\u003C/em> determine whether a device supports your videos,\nit's safe to specify the detailed codecs.\nThis philosophy has been applied way back, at least Chromium 62.\u003C/p>\n\u003Cp>\u003Ca href=\"https://chromium.googlesource.com/chromium/src.git/+/62.0.3178.1/content/browser/media/media_canplaytype_browsertest.cc\">https://chromium.googlesource.com/chromium/src.git/+/62.0.3178.1/content/browser/media/media_canplaytype_browsertest.cc\u003C/a>\u003C/p>\n\u003Ch1 id=\"4-4.-Solution\">4. Solution\u003C/h1>\n\u003Cp>Therefore, Find the exact codecs your videos are encoded with.\nIf you don't know what codecs your videos use or\nit's just because you are too lazy for this,\npick a codec that is absurdly high so that if a device support\nthat high-end codec, it's absolutely nonsense that\nthe device does not support your videos.\u003C/p>\n\u003Cp>There are some codec identifier examples on \u003Ca href=\"https://dashif.org/codecs/video/\">https://dashif.org/codecs/video/\u003C/a>.\nThey are the organization to help build MPEG standards and\ncreate interoperability guidelines.\nIt consists of well-known companies, such as Microsoft and Google.\nI would pick \u003Ccode>hvc1.2.4.L153.B0\u003C/code> to 99.9% make sure\nthat browsers support your HEVC videos.\u003C/p>\n\u003Cp>By the way, there is another powerful JavaScript API you can use to\nget detailed codec support information\nwith which you can specify content type, resolutions,\nand even bitrate called \u003Ccode>Media Capabilities\u003C/code>.\u003C/p>\n\u003Cp>\u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Media_Capabilities_API\">https://developer.mozilla.org/en-US/docs/Web/API/Media_Capabilities_API\u003C/a>\u003C/p>",{"layout":3,"toc":4,"editedDate":5,"title":6,"category":7,"tags":9,"author":12},"post",true,"2023-04-04","Determining HEVC (H.265) Support On Web Browser",[8],"Programming",[10,11],"web","javascript",[13],"이현재","2023-01-12","en","01-12-en-determining-hevc-support-on-web-browser",[18,22,25,28],{"depth":19,"id":20,"text":21},1,"1-1.-Abstraction","1. Abstraction",{"depth":19,"id":23,"text":24},"2-2.-Introduction","2. Introduction",{"depth":19,"id":26,"text":27},"3-3.-Why-codecs=hvc1-doesnt-work-on-Chromium","3. Why codecs=\"hvc1\" doesn't work on Chromium",{"depth":19,"id":29,"text":30},"4-4.-Solution","4. Solution",[15]],"uses":{"params":["year","slug"]}}]}
