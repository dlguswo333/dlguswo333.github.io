{"type":"data","nodes":[null,{"type":"data","data":[{"html":1,"frontmatter":2,"date":15,"lang":16,"tocData":17},"\u003Cp>I had been serving my personal Github blog for years.\nIt was written in Ruby and Jekyll,\nand this is my records migrating the blog to Sveltekit.\u003C/p>\n\u003Ch1 id=\"1-Why-Migrate?\">Why Migrate?\u003C/h1>\n\u003Cp>This is the most important thing. \u003Cstrong>WHY?\u003C/strong>\nWhy would you reinvent the wheel while you had no problem with the previous one;\nit had been working fine, no bug or errors, it had been what I had wanted them to be.\u003C/p>\n\u003Cp>But I was not satisfactory with what I had.\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>I am not familiar with \u003Ccode>ruby\u003C/code>.\u003C/strong>\u003Cbr>\nRuby is not my domain language as a web frontend dev. I am not familiar with its grammar and ecosystem.\nI would learn the language if I would, but for now, sadly I am not interested in the language.\u003C/li>\n\u003Cli>\u003Cstrong>I wanted to polish my JS skills.\u003C/strong>\u003Cbr>\nJavaScript is what I would call my domain language (\u003Cdel>at best\u003C/del>).\nI wanted to do a little side project that is not too overwhelming,\nbut requires decent amount of works to get me improve JS skills.\nIn that sense, this is a good opportunity to learn whild doing some project.\u003C/li>\n\u003Cli>\u003Cstrong>I wanted to take full control of my github.io.\u003C/strong>\u003Cbr>\nAs stated, I am not good at Ruby. I don't know where to add, edit or delete from the codes to improve my blog.\nAlso, the pre-existing html/css/js codes were a bit complicated to understand for me.\nIn that sense, migrating blog to Javascript was a great choice.\u003C/li>\n\u003Cli>\u003Cstrong>I wanted to try out \u003Ccode>Svelete\u003C/code> and \u003Ccode>Sveltekit\u003C/code>.\u003C/strong>\u003Cbr>\nI have heard that \u003Ca href=\"https://svelte.dev/\">svelte\u003C/a> is great.\nI have been using \u003Ccode>react\u003C/code> for some years and wanted to experience new things.\u003C/li>\n\u003Cli>\u003Cstrong>CSR + SSG support\u003C/strong>\u003Cbr>\nClient Side Rendering for smooth page transitions,\nand Server Side Generation for performance and search engine optimization.\nJekyll supports SSG, for sure. But does it support CSR? It might,\nbut am I fluent in Ruby enough to support CSR? I doubt.\u003C/li>\n\u003C/ul>\n\u003Ch1 id=\"2-Setup-a-Project\">Setup a Project\u003C/h1>\n\u003Cp>I wanted to start an empty git repository and npm project first and then add Sveltekit.\nBut it did not work that way; I could run \u003Ccode>vite\u003C/code>, but it showed browser's Not found error page.\nI don't know if there was misconfigurations in my \u003Ccode>svelte.config.js\u003C/code> or \u003Ccode>src/app.html\u003C/code>.\nAnyway I started a new boilerplate project with \u003Ccode>npm create svelte@latest my-app\u003C/code>.\u003C/p>\n\u003Ch2 id=\"3-eslint\">eslint\u003C/h2>\n\u003Cp>I Installed Svelte extension for \u003Cem>vscode\u003C/em> and also setup eslint.\nHowever eslint-cli did report code errors but vscode gui editor did not.\nI added the following field in vscode settings and\nvscode started to report lint errors found in \u003Ccode>.svelte\u003C/code> files.\u003C/p>\n\u003Cpre class=\"language-json\">\u003Ccode class=\"language-json code-highlight\">\u003Cspan class=\"code-line line-number\" line=\"1\">    \u003Cspan class=\"token property\">\"eslint.validate\"\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token string\">\"svelte\"\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span>\n\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch1 id=\"4-Using-Svelte\">Using Svelte\u003C/h1>\n\u003Cp>I have been writing React code, so my experience on Svlete is focused on comparing it to React.\nTo put it simple, Svelte is rather simple; I mean less verbose than React code.\nBut I am reluctant to say that Svelte is better than React.\nIt has pros and cons.\u003C/p>\n\u003Ch2 id=\"5-States,-Effect\">States, Effect\u003C/h2>\n\u003Cp>You need to declare states and effect to implement logics\nand wrap them in callbacks and memos for performance.\nBut you don't need to do that in Svelte.\nYou can write plain \u003Ccode>let\u003C/code> variables and reference or\nupdate them directly.\nThere is no need to worry about rerendering.\u003C/p>\n\u003Cp>To create an effect on value updates,\nwrite function body that need to be executed and\nadd dollar sign \u003Ccode>$\u003C/code> label to it.\nIt will run \u003Cstrong>reactively\u003C/strong> whenever values change.\u003C/p>\n\u003Cpre class=\"language-jsx\">\u003Ccode class=\"language-jsx code-highlight\">\u003Cspan class=\"code-line line-number\" line=\"1\">\u003Cspan class=\"token keyword\">let\u003C/span> count \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token number\">0\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"2\">\u003Cspan class=\"token literal-property property\">$\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"3\">  \u003Cspan class=\"token console class-name\">console\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token method function property-access\">log\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>count\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"4\">\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"5\">\u003Cspan class=\"token literal-property property\">$\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token keyword control-flow\">if\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>count \u003Cspan class=\"token operator\">>\u003C/span> \u003Cspan class=\"token number\">10\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"6\">  \u003Cspan class=\"token console class-name\">console\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token method function property-access\">log\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">'count is over ten!'\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"7\">\u003Cspan class=\"token punctuation\">}\u003C/span>\n\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>But the point is, the value referenced should be\non the left side of assignments.\nIt's like Svelte detects reference by\nwhether values' names are on the left hand side of assignments.\u003C/p>\n\u003Cblockquote>\n\u003Cp>A simple rule of thumb: the name of the updated variable must appear on the left hand side of the assignment.\u003Cbr>\n\u003Ca href=\"https://learn.svelte.dev/tutorial/updating-arrays-and-objects\">https://learn.svelte.dev/tutorial/updating-arrays-and-objects\u003C/a>\u003C/p>\n\u003C/blockquote>\n\u003Cblockquote>\n\u003Cp>This holds true for Svelte@4,\nbut it may change in upcoming Svelte@5.\u003Cbr>\nSee \u003Ca href=\"https://svelte.dev/blog/runes\">Svelte runes\u003C/a> for more.\u003C/p>\n\u003C/blockquote>\n\u003Ch2 id=\"6-Stores\">Stores\u003C/h2>\n\u003Cp>Unlike React, Svelte provides built-in global store feature out of the box.\u003C/p>\n\u003Cblockquote>\n\u003Cp>A store is an object that allows reactive access to a value via a simple store contract.\nThe svelte/store module contains minimal store implementations which fulfil this contract.\u003Cbr>\n\u003Ca href=\"https://svelte.dev/docs/svelte-components\">https://svelte.dev/docs/svelte-components\u003C/a>\u003C/p>\n\u003C/blockquote>\n\u003Cp>To reference inner value, you can access it by adding a dollar sign in front of it;\nwhether you read it or assign it. This let Svelte to subcribe to the store.\u003C/p>\n\u003Cpre class=\"language-jsx\">\u003Ccode class=\"language-jsx code-highlight\">\u003Cspan class=\"code-line line-number\" line=\"1\">  \u003Cspan class=\"token keyword module\">export\u003C/span> \u003Cspan class=\"token keyword\">const\u003C/span> currentTheme \u003Cspan class=\"token operator\">=\u003C/span> writable\u003Cspan class=\"token operator\">&#x3C;\u003C/span>\u003Cspan class=\"token maybe-class-name\">ColorTheme\u003C/span> \u003Cspan class=\"token operator\">|\u003C/span> \u003Cspan class=\"token keyword null nil\">null\u003C/span>\u003Cspan class=\"token operator\">>\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token keyword null nil\">null\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"2\">\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"3\">  \u003Cspan class=\"token keyword\">const\u003C/span> \u003Cspan class=\"token function-variable function\">getGithubImgSrc\u003C/span> \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token parameter\">\u003Cspan class=\"token literal-property property\">currentTheme\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token keyword\">typeof\u003C/span> $themeStore\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token arrow operator\">=>\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"4\">    \u003Cspan class=\"token keyword control-flow\">return\u003C/span> currentTheme \u003Cspan class=\"token operator\">===\u003C/span> \u003Cspan class=\"token string\">'dark'\u003C/span> \u003Cspan class=\"token operator\">?\u003C/span> \u003Cspan class=\"token string\">'/github-mark-white.svg'\u003C/span> \u003Cspan class=\"token operator\">:\u003C/span> \u003Cspan class=\"token string\">'/github-mark.svg'\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"5\">  \u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"6\">  \u003Cspan class=\"token keyword\">let\u003C/span> githubImgSrc \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token function\">getGithubImgSrc\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>$themeStore\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"7\">  \u003Cspan class=\"token literal-property property\">$\u003C/span>\u003Cspan class=\"token operator\">:\u003C/span> githubImgSrc \u003Cspan class=\"token operator\">=\u003C/span> \u003Cspan class=\"token function\">getGithubImgSrc\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>$themeStore\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>But I am not still used to writing dollar sign \u003Ccode>$\u003C/code> in front of Svelte stores.\nIn that case, I have an alternative; using \u003Ccode>set\u003C/code>, \u003Ccode>update\u003C/code> and \u003Ccode>subscribe\u003C/code> methods on the store.\nCheck out Svelte/store docs for more: \u003Ca href=\"https://svelte.dev/docs/svelte-store\">link\u003C/a>\u003C/p>\n\u003Cp>This built-in global storage shines Svelte over the React.\nYou do not need to list all the third-party packages and spend time pulling one out of them.\u003C/p>\n\u003Ch2 id=\"7-Callbacks\">Callbacks\u003C/h2>\n\u003Cp>To add callbacks onto html elements in React, you add attributes such as \u003Ccode>onClick\u003C/code>, \u003Ccode>onBlur\u003C/code>, ...\nIn Svelte, things go similar in that you add attributes on html elements.\nTo add event listeners, you add \u003Ccode>on:eventname\u003C/code> attributes and they are called \u003Ccode>element directives\u003C/code>.\u003C/p>\n\u003Cpre class=\"language-jsx\">\u003Ccode class=\"language-jsx code-highlight\">\u003Cspan class=\"code-line line-number\" line=\"1\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>script\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\u003Cspan class=\"token plain-text\">\n\u003C/span>\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"2\">\u003Cspan class=\"token plain-text\">\tlet count = 0;\n\u003C/span>\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"3\">\u003Cspan class=\"token plain-text\">\n\u003C/span>\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"4\">\u003Cspan class=\"token plain-text\">\t/** @param {MouseEvent} event */\n\u003C/span>\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"5\">\u003Cspan class=\"token plain-text\">\tfunction handleClick(event) {\n\u003C/span>\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"6\">\u003Cspan class=\"token plain-text\">\t\tcount += 1;\n\u003C/span>\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"7\">\u003Cspan class=\"token plain-text\">\t}\n\u003C/span>\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"8\">\u003Cspan class=\"token plain-text\">\u003C/span>\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;/\u003C/span>script\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"9\">\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"10\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>button\u003C/span> \u003Cspan class=\"token attr-name\">\u003Cspan class=\"token namespace\">on:\u003C/span>click\u003C/span>\u003Cspan class=\"token script language-javascript\">\u003Cspan class=\"token script-punctuation punctuation\">=\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>handleClick\u003Cspan class=\"token punctuation\">}\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\u003Cspan class=\"token plain-text\">\n\u003C/span>\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"11\">\u003Cspan class=\"token plain-text\">\tcount: \u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>count\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token plain-text\">\n\u003C/span>\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"12\">\u003Cspan class=\"token plain-text\">\u003C/span>\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;/\u003C/span>button\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>There are directives other than \u003Ccode>on:...\u003C/code>. For example, with \u003Ccode>bind:value\u003C/code> property,\nyou can bind a variable to the html element's \u003Ccode>value\u003C/code>.\u003C/p>\n\u003Cpre class=\"language-jsx\">\u003Ccode class=\"language-jsx code-highlight\">\u003Cspan class=\"code-line line-number\" line=\"1\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>script\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\u003Cspan class=\"token plain-text\">\n\u003C/span>\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"2\">\u003Cspan class=\"token plain-text\">  let name = '';\n\u003C/span>\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"3\">\u003Cspan class=\"token plain-text\">\n\u003C/span>\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"4\">\u003Cspan class=\"token plain-text\">  $: {\n\u003C/span>\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"5\">\u003Cspan class=\"token plain-text\">    console.log(name);\n\u003C/span>\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"6\">\u003Cspan class=\"token plain-text\">  }\n\u003C/span>\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"7\">\u003Cspan class=\"token plain-text\">\u003C/span>\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;/\u003C/span>script\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"8\">\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"9\">\u003Cspan class=\"token maybe-class-name\">Your\u003C/span> name\u003Cspan class=\"token operator\">:\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"10\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>input\u003C/span> \u003Cspan class=\"token attr-name\">\u003Cspan class=\"token namespace\">bind:\u003C/span>value\u003C/span>\u003Cspan class=\"token script language-javascript\">\u003Cspan class=\"token script-punctuation punctuation\">=\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>name\u003Cspan class=\"token punctuation\">}\u003C/span>\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\u003Cspan class=\"token plain-text\">\n\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Also there is a directive \u003Ccode>bind:this\u003C/code> which does the same thing with \u003Ccode>ref\u003C/code> property in React.\u003C/p>\n\u003Cpre class=\"language-jsx\">\u003Ccode class=\"language-jsx code-highlight\">\u003Cspan class=\"code-line line-number\" line=\"1\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>script\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\u003Cspan class=\"token plain-text\">\n\u003C/span>\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"2\">\u003Cspan class=\"token plain-text\">  import {onMount} from 'svelte';\n\u003C/span>\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"3\">\u003Cspan class=\"token plain-text\">  let inputElement;\n\u003C/span>\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"4\">\u003Cspan class=\"token plain-text\">  onMount(() => {\n\u003C/span>\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"5\">\u003Cspan class=\"token plain-text\">    inputElement.placeholder = 'placeholder added with onMount';\n\u003C/span>\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"6\">\u003Cspan class=\"token plain-text\">  });\n\u003C/span>\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"7\">\u003Cspan class=\"token plain-text\">\u003C/span>\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;/\u003C/span>script\u003C/span>\u003Cspan class=\"token punctuation\">>\u003C/span>\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"8\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token tag\">\u003Cspan class=\"token punctuation\">&#x3C;\u003C/span>input\u003C/span> \u003Cspan class=\"token attr-name\">\u003Cspan class=\"token namespace\">bind:\u003C/span>this\u003C/span>\u003Cspan class=\"token script language-javascript\">\u003Cspan class=\"token script-punctuation punctuation\">=\u003C/span>\u003Cspan class=\"token punctuation\">{\u003C/span>inputElement\u003Cspan class=\"token punctuation\">}\u003C/span>\u003C/span> \u003Cspan class=\"token punctuation\">/>\u003C/span>\u003C/span>\n\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>There are so many directives of a variety in Svelte,\nyou definitely want to check out official \u003Ca href=\"https://svelte.dev/docs/element-directives\">documentation\u003C/a>.\u003C/p>\n\u003Ch2 id=\"8-Lifecycle\">Lifecycle\u003C/h2>\n\u003Cp>\u003Ccode>onMount\u003C/code> is a function which executes a function handed as a parameter\nwhen Svelte component renders for the first time.\u003C/p>\n\u003Cpre class=\"language-jsx\">\u003Ccode class=\"language-jsx code-highlight\">\u003Cspan class=\"code-line line-number\" line=\"1\">\u003Cspan class=\"token function\">onMount\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token arrow operator\">=>\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"2\">  \u003Cspan class=\"token console class-name\">console\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token method function property-access\">log\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">'First render'\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"3\">\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"4\">\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"5\">\u003Cspan class=\"token function\">useEffect\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span> \u003Cspan class=\"token arrow operator\">=>\u003C/span> \u003Cspan class=\"token punctuation\">{\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"6\">  \u003Cspan class=\"token console class-name\">console\u003C/span>\u003Cspan class=\"token punctuation\">.\u003C/span>\u003Cspan class=\"token method function property-access\">log\u003C/span>\u003Cspan class=\"token punctuation\">(\u003C/span>\u003Cspan class=\"token string\">'First render'\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003Cspan class=\"code-line line-number\" line=\"7\">\u003Cspan class=\"token punctuation\">}\u003C/span>\u003Cspan class=\"token punctuation\">,\u003C/span> \u003Cspan class=\"token punctuation\">[\u003C/span>\u003Cspan class=\"token punctuation\">]\u003C/span>\u003Cspan class=\"token punctuation\">)\u003C/span>\u003Cspan class=\"token punctuation\">;\u003C/span>\n\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Those two codes from Svelete and React basically do the same thing.\nThey are useful when you need to execute some logics to initialize components.\u003C/p>",{"toc":3,"title":4,"category":5,"tags":7,"author":13},true,"Let's Migrate Github Blog to Sveltekit: Sveltekit",[6],"Programming",[8,9,10,11,12],"web","svelte","sveltekit","javascript","migrate-blog-to-sveltekit",[14],"이현재","2023-12-18","en",[18,22,25,29,32,35,38,41],{"depth":19,"id":20,"text":21},1,"1-Why-Migrate?","Why Migrate?",{"depth":19,"id":23,"text":24},"2-Setup-a-Project","Setup a Project",{"depth":26,"id":27,"text":28},2,"3-eslint","eslint",{"depth":19,"id":30,"text":31},"4-Using-Svelte","Using Svelte",{"depth":26,"id":33,"text":34},"5-States,-Effect","States, Effect",{"depth":26,"id":36,"text":37},"6-Stores","Stores",{"depth":26,"id":39,"text":40},"7-Callbacks","Callbacks",{"depth":26,"id":42,"text":43},"8-Lifecycle","Lifecycle"],"uses":{"params":["year","slug"]}}]}
